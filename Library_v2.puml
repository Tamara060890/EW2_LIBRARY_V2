@startuml LibraryManagementSystem

!theme plain

' Model Package
package "model" {
    class Book {
        - intecID: String
        - bookType: BookType
        - title: String
        - author: String
        - publicationYear: int
        - isbn: String
        - availableCopies: int

        + Book(intecID: String, bookType: BookType, title: String,
               author: String, publicationYear: int,
               isbn: String, availableCopies: int)

        + getIntecID(): String
        + getBookType(): BookType
        + getTitle(): String
        + setTitle(title: String): void
        + getAuthor(): String
        + setAuthor(author: String): void
        + getPublicationYear(): int
        + setPublicationYear(publicationYear: int): void
        + getIsbn(): String
        + setIsbn(isbn: String): void
        + getAvailableCopies(): int
        + setAvailableCopies(availableCopies: int): void
        + toString(): String
    }


    class Member {
         - Long memberId
            - String name
            - int startYear
            - String phoneNumber
            - String email
            - String membershipNumber
            - LocalDate membershipDate
            + Member()
            + Member(Long memberId, String membershipNumber, String name, int startYear,
                     String phoneNumber, String email, LocalDate membershipDate)
            + getMemberId(): Long
            + setMemberId(Long memberId): void
            + getName(): String
            + setName(String name): void
            + getStartYear(): int
            + setStartYear(int startYear): void
            + getPhoneNumber(): String
            + setPhoneNumber(String phoneNumber): void
            + getEmail(): String
            + setEmail(String email): void
            + getMembershipNumber(): String
            + setMembershipNumber(String membershipNumber): void
            + getMembershipDate(): LocalDate
            + setMembershipDate(LocalDate membershipDate): void
    }

    class Loan {
        - loanId: Long
        - book: Book
        - member: Member
        - loanDate: LocalDate
        - dueDate: LocalDate
        - returnDate: LocalDate
        - status: LoanStatus

        + Loan()
        + Loan(book: Book, member: Member, loanDate: LocalDate,
               dueDate: LocalDate, returnDate: LocalDate)

        + getLoanId(): Long
        + setLoanId(loanId: Long): void
        + getBook(): Book
        + setBook(book: Book): void
        + getMember(): Member
        + setMember(member: Member): void
        + getLoanDate(): LocalDate
        + setLoanDate(loanDate: LocalDate): void
        + getDueDate(): LocalDate
        + setDueDate(dueDate: LocalDate): void
        + getReturnDate(): LocalDate
        + setReturnDate(returnDate: LocalDate): void
        + getStatus(): LoanStatus
        + setStatus(status: LoanStatus): void

        + returnBook(): void
        + isReturned(): boolean
        + isOverdue(): boolean
        + toString(): String
    }

}

' Repository Package
package "repository" {
    interface BookRepository {
        + addBook(book: Book): void
        + deleteBook(intecID: String): boolean
        + updateBook(updatedBook: Book): void
        + searchBookTitle(title: String): Book
        + searchBookAuthor(author: String): List<Book>
        + searchBookISBN(isbn: String): Book
        + searchBookIntecID(intecID: String): Book
        + getAllBooks(): List<Book>
        + loadBooksFromFile(fileName: String): void
    }

    interface MemberRepository {
         + saveMember(member: Member): Member
         + findByMemberId(memberId: Long): Optional<Member>
         + findByEmail(email: String): Optional<Member>
         + findAllMembers(): List<Member>
         + deleteMember(memberId: Long): boolean
    }

    interface LoanRepository {
        + save(loan: Loan): Loan
        + findById(loanId: Long): Loan
        + findByMemberId(memberId: Long): List<Loan>
        + findActiveLoans(): List<Loan>
        + findOverdueLoans(): List<Loan>
        + findAll(): List<Loan>
        + delete(loanId: Long): boolean
    }


    package "impl" {
        class BookRepositoryImpl {
            - bookInventory: Map<String, Book>
            - csvFileName: String
            - nextIdCounter: int

            + BookRepositoryImpl()
            + addBook(book: Book): void
            + deleteBook(intecID: String): boolean
            + updateBook(updatedBook: Book): void
            + searchBookTitle(title: String): Book
            + searchBookAuthor(author: String): List<Book>
            + searchBookISBN(isbn: String): Book
            + searchBookIntecID(intecID: String): Book
            + getAllBooks(): List<Book>
            + loadBooksFromFile(fileName: String): void
            + getNextIdCounter(): int
            - updateCounterFromId(intecID: String): void
            - saveToCSV(): void
        }


        class MemberRepositoryImpl {
            - members: List<Member>
            - csvFile: String
            + MemberRepositoryImpl()
            + saveMember(member: Member): Member
            + findByMemberId(memberId: Long): Optional<Member>
            + findByEmail(email: String): Optional<Member>
            + findAllMembers(): List<Member>
            + deleteMember(memberId: Long): boolean
            - loadFromCSV(): void
            - saveToCSV(): void
        }

        class LoanRepositoryImpl {
            - loans: List<Loan>
            - nextLoanId: Long

            + save(loan: Loan): Loan
            + findById(loanId: Long): Loan
            + findByMemberId(memberId: Long): List<Loan>
            + findActiveLoans(): List<Loan>
            + findOverdueLoans(): List<Loan>
            + findAll(): List<Loan>
            + delete(loanId: Long): boolean
        }

    }
}

' Service Package
package "service" {
    class BookService {
        - bookRepository: BookRepositoryImpl

        + BookService(bookRepository: BookRepository)
        - generateIntecID(): String
        + addBook(bookType: BookType, title: String, author: String, publicationYear: int, isbn: String, availableCopies: int): Book
        + deleteBook(intecID: String): boolean
        + updateBook(updatedBook: Book): void
        + searchBookTitle(title: String): Book
        + searchBookAuthor(author: String): List<Book>
        + searchBookISBN(isbn: String): Book
        + searchBookIntecID(intecID: String): Book
        + getAllBooks(): List<Book>
        + searchBooksByType(bookType: BookType): List<Book>
        + searchBooksByTypeReference(referenceNumber: int): List<Book>
        + displayBookTypes(): void
        + loadBooksFromFile(fileName: String): void
        + showBookStatistics(): void
    }

    class MemberService {
        - memberRepository: MemberRepository
        + MemberService(memberRepository: MemberRepository)
        + addMember(member: Member): Member
        + updateMember(member: Member): Member
        + removeMember(id: Long): void
        + searchMemberByEmail(email: String): Member
        + findMemberById(id: Long): Member
        + showAllMembers(): List<Member>
        - validateMember(member: Member): void
    }

    class LoanService {
        - loanRepo: LoanRepository
        - bookRepo: BookRepository
        - memberRepo: MemberRepository

        + LoanService(loanRepo: LoanRepository, bookRepo: BookRepository, memberRepo: MemberRepository)
        + borrow(memberId: Long, intecID: String, isbn: String): Loan
        + borrow(memberId: Long, intecID: String, isbn: String, days: int): Loan
        + returnLoan(loanId: Long): boolean
        + getById(id: Long): Loan
        + getActiveLoans(): List<Loan>
        + getOverdueLoans(): List<Loan>
        + getLoansByMember(memberId: Long): List<Loan>
        + getAllLoans(): List<Loan>
    }

}

'' Facade Package
'package "facade" {
'    class LibraryFacade {
'        -BookService bookService
'        -MemberService memberService
'        -LoanService loanService
'        +LibraryFacade(BookService, MemberService, LoanService)
'        +addBook(Book): Book
'        +registerMember(Member): Member
'        +borrowBook(Long, Long): Loan
'        +returnBook(Long): Loan
'        +searchBooks(String): List<Book>
'        +getMemberLoans(Long): List<Loan>
'        +getOverdueLoans(): List<Loan>
'    }
'}

' Main Application (root package)
class LibraryApplication {
    +{static} main(String[]): void
    -{static} initializeServices(): void
    -{static} runApplication(): void
}

' Relationships within model
Book ||--o{ Loan : "is borrowed in"
Member ||--o{ Loan : "borrows"
Book ||--|| BookType : "has type"
Loan ||--|| LoanStatus : "has status"

' Implementation relationships
BookRepositoryImpl ..|> BookRepository : implements
MemberRepositoryImpl ..|> MemberRepository : implements
LoanRepositoryImpl ..|> LoanRepository : implements

' Service dependencies
BookService --> BookRepository : uses
MemberService --> MemberRepository : uses
LoanService --> LoanRepository : uses
LoanService --> BookRepository : uses
LoanService --> MemberRepository : uses

'' Facade dependencies
'LibraryFacade --> BookService : uses
'LibraryFacade --> MemberService : uses
'LibraryFacade --> LoanService : uses

'' Main application
'LibraryApplication --> LibraryFacade : creates

@enduml