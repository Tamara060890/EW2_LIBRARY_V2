@startuml LibraryManagementSystem

!theme plain

' Model Package
package "model" {
    class Book {
        -Map<BookType, Integer>
        -int ID
        -String title
        -String author
        -int publicationYear
        -String isbn
        -int availableCopies
        -BookType bookType
        +Book()
        +getIsbn(): String
        +getTitle(): String
        +getAuthor(): String
        +getPublicationYear(): int
        +getAvailableCopies(): int
        +getBookType(): BookType
        +setAvailableCopies(int): void
    }

    class Member {
         - Long memberId
            - String name
            - int startYear
            - String phoneNumber
            - String email
            - String membershipNumber
            - LocalDate membershipDate
            + Member()
            + Member(Long memberId, String membershipNumber, String name, int startYear,
                     String phoneNumber, String email, LocalDate membershipDate)
            + getMemberId(): Long
            + setMemberId(Long memberId): void
            + getName(): String
            + setName(String name): void
            + getStartYear(): int
            + setStartYear(int startYear): void
            + getPhoneNumber(): String
            + setPhoneNumber(String phoneNumber): void
            + getEmail(): String
            + setEmail(String email): void
            + getMembershipNumber(): String
            + setMembershipNumber(String membershipNumber): void
            + getMembershipDate(): LocalDate
            + setMembershipDate(LocalDate membershipDate): void
    }

    class Loan {
        -Long id
        -Book book
        -Member member
        -LocalDate loanDate
        -LocalDate dueDate
        -LocalDate returnDate
        -LoanStatus status
        +Loan()
        +getId(): Long
        +getBook(): Book
        +getMember(): Member
        +returnBook(): void
        +isOverdue(): boolean
    }

    enum BookType {
        TUTORIAL
        REFERENCE
        CONCEPTUAL
        PROJECT_BASED
        CAREER_SOFT_SKILLS
        TRENDS_FUTURE
        LANGUAGE_SPECIFIC
        FRAMEWORK_TOOL_SPECIFIC
    }

    enum LoanStatus {
        ACTIVE
        RETURNED
        OVERDUE
        LOST
    }
}

' Repository Package
package "repository" {
    interface BookRepository {
        +add(Book): Book
        +delete(Long): void
        +update(Book): void
        +findById(Long): Optional<Book>
        +findByIsbn(String): Optional<Book>
        +findAll(): List<Book>
        +findAvailableBooks(): List<Book>

    }

    interface MemberRepository {
        +save(Member): Member
        +findById(Long): Optional<Member>
        +findByEmail(String): Optional<Member>
        +findAll(): List<Member>
        +delete(Long): void
    }

    interface LoanRepository {
        +save(Loan): Loan
        +findById(Long): Optional<Loan>
        +findByMemberId(Long): List<Loan>
        +findActiveLoans(): List<Loan>
        +findOverdueLoans(): List<Loan>
        +delete(Long): void
    }

    package "impl" {
        class BookRepositoryImpl {
            -List<Book> books
            +save(Book): Book
            +findById(Long): Optional<Book>
            +findByIsbn(String): Optional<Book>
            +findAll(): List<Book>
            +findAvailableBooks(): List<Book>
            +delete(Long): void
        }

        class MemberRepositoryImpl {
            -List<Member> members
            +save(Member): Member
            +findById(Long): Optional<Member>
            +findByEmail(String): Optional<Member>
            +findAll(): List<Member>
            +delete(Long): void
        }

        class LoanRepositoryImpl {
            -List<Loan> loans
            +save(Loan): Loan
            +findById(Long): Optional<Loan>
            +findByMemberId(Long): List<Loan>
            +findActiveLoans(): List<Loan>
            +findOverdueLoans(): List<Loan>
            +delete(Long): void
        }
    }
}

' Service Package
package "service" {
    class BookService {
        -BookRepository bookRepository
        +BookService(BookRepository)
        +addBook(Book): Book
        +findBookById(Long): Book
        +findBookByIsbn(String): Book
        +getAllBooks(): List<Book>
        +getAvailableBooks(): List<Book>
        +updateBook(Book): Book
        +deleteBook(Long): void
    }

    class MemberService {
        -MemberRepository memberRepository
        +MemberService(MemberRepository)
        +registerMember(Member): Member
        +findMemberById(Long): Member
        +findMemberByEmail(String): Member
        +getAllMembers(): List<Member>
        +updateMember(Member): Member
        +deleteMember(Long): void
    }

    class LoanService {
        -LoanRepository loanRepository
        -BookRepository bookRepository
        -MemberRepository memberRepository
        +LoanService(LoanRepository, BookRepository, MemberRepository)
        +borrowBook(Long, Long): Loan
        +returnBook(Long): Loan
        +findLoanById(Long): Loan
        +findLoansByMember(Long): List<Loan>
        +getActiveLoans(): List<Loan>
        +getOverdueLoans(): List<Loan>
        +calculateFine(Loan): BigDecimal
    }
}

'' Facade Package
'package "facade" {
'    class LibraryFacade {
'        -BookService bookService
'        -MemberService memberService
'        -LoanService loanService
'        +LibraryFacade(BookService, MemberService, LoanService)
'        +addBook(Book): Book
'        +registerMember(Member): Member
'        +borrowBook(Long, Long): Loan
'        +returnBook(Long): Loan
'        +searchBooks(String): List<Book>
'        +getMemberLoans(Long): List<Loan>
'        +getOverdueLoans(): List<Loan>
'    }
'}

' Main Application (root package)
class LibraryApplication {
    +{static} main(String[]): void
    -{static} initializeServices(): void
    -{static} runApplication(): void
}

' Relationships within model
Book ||--o{ Loan : "is borrowed in"
Member ||--o{ Loan : "borrows"
Book ||--|| BookType : "has type"
Loan ||--|| LoanStatus : "has status"

' Implementation relationships
BookRepositoryImpl ..|> BookRepository : implements
MemberRepositoryImpl ..|> MemberRepository : implements
LoanRepositoryImpl ..|> LoanRepository : implements

' Service dependencies
BookService --> BookRepository : uses
MemberService --> MemberRepository : uses
LoanService --> LoanRepository : uses
LoanService --> BookRepository : uses
LoanService --> MemberRepository : uses

'' Facade dependencies
'LibraryFacade --> BookService : uses
'LibraryFacade --> MemberService : uses
'LibraryFacade --> LoanService : uses

'' Main application
'LibraryApplication --> LibraryFacade : creates

@enduml